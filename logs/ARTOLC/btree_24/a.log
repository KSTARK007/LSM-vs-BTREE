Optimized Custom TID ART-OLC Benchmark
Results file: a.csv
node sizes :
  N4: 96
  N16: 200
  N48: 696
  N256: 2104
Creating ART-OLC tree with optimized custom TID implementation...
Pre-populating tree with 20000000 keys...
Inserted 0 keys...
Inserted 1000000 keys...
Inserted 2000000 keys...
Inserted 3000000 keys...
Inserted 4000000 keys...
Inserted 5000000 keys...
Inserted 6000000 keys...
Inserted 7000000 keys...
Inserted 8000000 keys...
Inserted 9000000 keys...
Inserted 10000000 keys...
Inserted 11000000 keys...
Inserted 12000000 keys...
Inserted 13000000 keys...
Inserted 14000000 keys...
Inserted 15000000 keys...
Inserted 16000000 keys...
Inserted 17000000 keys...
Inserted 18000000 keys...
Inserted 19000000 keys...
Tree populated successfully!
Starting benchmark with 24 threads...
Optimized Custom TID Benchmark Results:
GET | Threads: 24 | Avg Latency: 2524.72 ns/op | Throughput: 9506012.86 ops/s
PUT | Threads: 24 | Avg Latency: 3141.90 ns/op | Throughput: 7638694.91 ops/s
Total | Threads: 24 | Throughput: 8470673.21 ops/s | Avg Latency: 2833.30 ns/op
Total failures: 0
Writing row with 5 columns
